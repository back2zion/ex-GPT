version: '3.8'

services:
  # ============= AI & ML Services =============
  
  # ex-GPT Enterprise Server
  ex-gpt-enterprise:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: ex-gpt-enterprise
    ports:
      - "5001:5001"
      - "9090:9090"  # Metrics
    environment:
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ex_gpt_enterprise
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./.env.enterprise:/app/.env
    depends_on:
      - redis
      - postgres
      - qdrant
    networks:
      - ex-gpt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: ex-gpt-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    networks:
      - ex-gpt-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
    # GPU support (uncomment if you have NVIDIA GPU)
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all

  # ============= Vector Databases =============
  
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ex-gpt-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - ex-gpt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============= Data Storage =============
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ex-gpt-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ex_gpt_enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ex-gpt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: ex-gpt-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ex-gpt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============= Monitoring & Analytics =============
  
  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ex-gpt-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ex-gpt-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ex-gpt-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ex-gpt-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # Kibana Dashboard
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ex-gpt-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - ex-gpt-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # ============= Load Balancer & Proxy =============
  
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ex-gpt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    networks:
      - ex-gpt-network
    restart: unless-stopped
    depends_on:
      - ex-gpt-enterprise

  # ============= Message Queue =============
  
  # RabbitMQ for Async Processing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ex-gpt-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # ============= Worker Services =============
  
  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: ex-gpt-celery-worker
    command: celery -A server_enterprise.celery worker --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ex_gpt_enterprise
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - rabbitmq
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # Document Processing Service
  document-processor:
    build:
      context: .
      dockerfile: Dockerfile.document-processor
    container_name: ex-gpt-document-processor
    environment:
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/processed:/app/processed
    depends_on:
      - redis
      - qdrant
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # ============= Security Services =============
  
  # Vault for Secret Management
  vault:
    image: vault:latest
    container_name: ex-gpt-vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - ex-gpt-network
    restart: unless-stopped

  # ============= Backup Services =============
  
  # Database Backup
  backup:
    image: postgres:15-alpine
    container_name: ex-gpt-backup
    environment:
      - PGPASSWORD=password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - postgres
    networks:
      - ex-gpt-network
    restart: unless-stopped

# ============= Networks =============
networks:
  ex-gpt-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ============= Volumes =============
volumes:
  # AI & Data
  ollama_data:
    driver: local
  qdrant_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  
  # Queue
  rabbitmq_data:
    driver: local

# ============= Development Override =============
# Use: docker-compose -f docker-compose.enterprise.yml -f docker-compose.dev.yml up
